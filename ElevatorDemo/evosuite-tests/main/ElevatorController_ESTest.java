/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 15 23:31:01 EST 2017
 */

package main;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = false, useJEE = true) 
public class ElevatorController_ESTest extends ElevatorController_ESTest_scaffolding {

  @Test(timeout = 100000)
  public void test0()  throws Throwable  {
      ElevatorController.addMotors();
  }

  @Test(timeout = 100000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        ElevatorController.startMotors();
       //  fail("Expecting exception: IllegalThreadStateException");
       // Unstable assertion
      } catch(IllegalThreadStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 100000)
  public void test2()  throws Throwable  {
      ElevatorController.initialize(0, 0);
  }

  @Test(timeout = 100000)
  public void test3()  throws Throwable  {
      int int0 = ElevatorController.getNumberOfFloors();
      assertEquals(0, int0);
  }

  @Test(timeout = 100000)
  public void test4()  throws Throwable  {
      ElevatorController elevatorController0 = new ElevatorController();
      System.out.println(elevatorController0.getNumberOfFloors());
      assertEquals(0, elevatorController0.getNumberOfFloors());
  }

  @Test(timeout = 100000)
  public void test5()  throws Throwable  {
      int int0 = ElevatorController.getNumberOfElevators();
      System.out.println(int0);
      assertEquals(0, int0);
  }

  @Test(timeout = 100000)
  public void test6()  throws Throwable  {
      ArrayList<Thread> arrayList0 = ElevatorController.getMotors();
      assertTrue(arrayList0.isEmpty());
      
      ElevatorController.addMotors();
      ArrayList<Thread> arrayList1 = ElevatorController.getMotors();
      assertTrue(arrayList1.isEmpty());
  }
}
