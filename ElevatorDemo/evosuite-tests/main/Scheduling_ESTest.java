/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 15 23:36:35 EST 2017
 */

package main;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.fail;

import java.util.ArrayList;
import java.util.Collection;
import java.util.TreeSet;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = false, useJEE = true) 
public class Scheduling_ESTest extends Scheduling_ESTest_scaffolding {

  @Test(timeout = 100000)
  public void test00()  throws Throwable  {
      ArrayList<Elevator> arrayList0 = new ArrayList<Elevator>();
      Elevator elevator0 = new Elevator(0);
      TreeSet<Double> treeSet0 = new TreeSet<Double>();
      Double double0 = new Double(0);
      treeSet0.add(double0);
      Double double1 = new Double(0);
      treeSet0.add(double1);
      treeSet0.add(double1);
      elevator0.setRequestSet(treeSet0);
      elevator0.setDoorSize(0);
      elevator0.closeDoors();
      arrayList0.add(elevator0);
      Direction direction0 = Direction.UP;
      arrayList0.add(elevator0);
      Scheduling.nearestCar(arrayList0, (-3001), direction0, 510);
      Scheduling.sectorAlgo(0, 1242, (-3001));
      // Undeclared exception!
      try { 
        Scheduling.randomCar(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be positive
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 100000)
  public void test01()  throws Throwable  {
      Scheduling.sectorAlgo(942, 942, 1);
      // Undeclared exception!
      try { 
        Scheduling.sectorAlgo((-3185), 0, 1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("main.Scheduling", e);
      }
  }

  @Test(timeout = 100000)
  public void test02()  throws Throwable  {
      Scheduling scheduling0 = new Scheduling();
      Scheduling.sectorAlgo(3399, 1, (-2034));
      ArrayList<Elevator> arrayList0 = new ArrayList<Elevator>();
      // Undeclared exception!
      try { 
        arrayList0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 100000)
  public void test03()  throws Throwable  {
      Scheduling scheduling0 = new Scheduling();
      ArrayList<Elevator> arrayList0 = new ArrayList<Elevator>();
      Elevator elevator0 = new Elevator((-2293));
      arrayList0.add(elevator0);
      Elevator elevator1 = new Elevator((-1));
      arrayList0.add(elevator1);
      arrayList0.stream();
      Direction direction0 = Direction.UP;
      Scheduling.nearestCar(arrayList0, 4, direction0, 4);
      // Undeclared exception!
      try { 
        Scheduling.randomCar(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be positive
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 100000)
  public void test04()  throws Throwable  {
      Scheduling.randomCar(2);
      Direction direction0 = Direction.DOWN;
      // Undeclared exception!
      try { 
        Scheduling.nearestCar((ArrayList<Elevator>) null, 0, direction0, (-100));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.Scheduling", e);
      }
  }

  @Test(timeout = 100000)
  public void test05()  throws Throwable  {
      Scheduling.randomCar(858);
      ArrayList<Elevator> arrayList0 = new ArrayList<Elevator>();
      Elevator elevator0 = new Elevator(2794);
      arrayList0.add(elevator0);
      Direction direction0 = Direction.DOWN;
      Scheduling.nearestCar(arrayList0, 858, direction0, 1624);
      // Undeclared exception!
      try { 
        Scheduling.sectorAlgo(1624, (-1012), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.Scheduling", e);
      }
  }

  @Test(timeout = 100000)
  public void test06()  throws Throwable  {
      Scheduling.sectorAlgo(3, 3, 3);
      // Undeclared exception!
      try { 
        Scheduling.sectorAlgo(3, 0, (-1532));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("main.Scheduling", e);
      }
  }

  @Test(timeout = 100000)
  public void test07()  throws Throwable  {
      Scheduling.randomCar(1);
  }

  @Test(timeout = 100000)
  public void test08()  throws Throwable  {
      Scheduling.sectorAlgo(1102, 2, 0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Scheduling scheduling0 = new Scheduling();
      ArrayList<Elevator> arrayList0 = new ArrayList<Elevator>();
      Elevator elevator0 = new Elevator(0);
      arrayList0.add(elevator0);
      Direction direction0 = Direction.DOWN;
      Scheduling.nearestCar(arrayList0, 1288, direction0, 1288);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Scheduling.sectorAlgo((-1), (-1), 3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.Scheduling", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<Elevator> arrayList0 = new ArrayList<Elevator>();
      Direction direction0 = Direction.UP;
      Scheduling.nearestCar(arrayList0, (-864), direction0, (-864));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Scheduling.randomCar(829);
      Scheduling.sectorAlgo((-1343), 3, (-1343));
      ArrayList<Elevator> arrayList0 = new ArrayList<Elevator>();
      int int0 = 1;
      Elevator elevator0 = new Elevator(1);
      arrayList0.add(elevator0);
      TreeSet<Double> treeSet0 = elevator0.getRequestSet();
      Double double0 = new Double((-2410.242645803));
      Double double1 = new Double(606.155408079);
      treeSet0.add(double1);
      treeSet0.add(double0);
      elevator0.setRequestSet(treeSet0);
      arrayList0.add(elevator0);
      Direction direction0 = Direction.DOWN;
      int int1 = 0;
      Scheduling.nearestCar(arrayList0, 829, direction0, 0);
      int int2 = 316;
      arrayList0.parallelStream();
      int int3 = (-631);
      // Undeclared exception!
      try { 
        arrayList0.set(410, elevator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 410, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        Scheduling.randomCar(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be positive
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Collection<Elevator> collection0 = null;
      ArrayList<Elevator> arrayList0 = null;
      try {
        arrayList0 = new ArrayList<Elevator>((Collection<? extends Elevator>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Scheduling.sectorAlgo(2155, 2155, 2);
      Scheduling.randomCar(1087);
      int int0 = 317;
      Scheduling.sectorAlgo(317, 994, (-2530));
      // Undeclared exception!
      try { 
        Scheduling.sectorAlgo((-756), 0, 898);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("main.Scheduling", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Scheduling.randomCar(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be positive
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Scheduling scheduling0 = new Scheduling();
      int int0 = 0;
      // Undeclared exception!
      try { 
        Scheduling.sectorAlgo((-3019), 0, (-1073));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("main.Scheduling", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 2693;
      Scheduling.sectorAlgo(2693, 2, 2);
      // Undeclared exception!
      try { 
        Scheduling.randomCar(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be positive
         //
         verifyException("java.util.Random", e);
      }
  }
}
